<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on symo&#39;s blog</title>
    <link>https://example.com/posts/</link>
    <description>Recent content in Posts on symo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright 2017 Symo</copyright>
    <lastBuildDate>Sun, 06 May 2018 18:45:05 +0800</lastBuildDate>
    
	<atom:link href="https://example.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debian8 安装 kernel4.9 启用 BBR</title>
      <link>https://example.com/posts/debian8-%E5%AE%89%E8%A3%85-kernel4.9-%E5%90%AF%E7%94%A8-bbr/</link>
      <pubDate>Sun, 06 May 2018 18:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/debian8-%E5%AE%89%E8%A3%85-kernel4.9-%E5%90%AF%E7%94%A8-bbr/</guid>
      <description>vps 升级 kernel4.9 主要是为了开启 BBR
 添加 backports 源
$ echo &amp;quot;deb http://ftp.debian.org/debian jessie-backports main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list  安装 kernel, 这个过程比较久
$ apt update &amp;amp;&amp;amp; apt -t jessie-backports install linux-image-4.9  删除旧内核, 大概节省160m空间 (可选)
$ dpkg -l | grep linux-image $ apt-get purge 旧内核  更新引导, 重启
$ update-grub $ reboot  检查内核版本
uname -r  启用 bbr
$ modprobe tcp_bbr $ echo &amp;quot;tcp_bbr&amp;quot; &amp;gt;&amp;gt; /etc/modules-load.d/modules.conf $ echo &amp;quot;net.core.default_qdisc=fq&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.</description>
    </item>
    
    <item>
      <title>Apache 开启 Rewrite 模块</title>
      <link>https://example.com/posts/%E5%BC%80%E5%90%AFrewrite%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/%E5%BC%80%E5%90%AFrewrite%E6%A8%A1%E5%9D%97/</guid>
      <description>开启Rewrite模块 修改Apache主配置文件  去掉LoadModule rewrite_module modules/mod_rewrite.so 前的# 修改&amp;lt;Directory&amp;gt;配置段为Options Indexes FollowSymLinks 如果想要使用.htaccess文件,将网站目录配置段的AllowOverride改成All  .htaccess文件  .htaccess⽂件(或者&amp;rdquo;分布式配置⽂件&amp;rdquo;）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。  RewriteEngine  打开或关闭运行时刻的重写引擎 RewriteEngine 为重写引擎定义规则 RewriteRule RewriteCond指令定义了一个规则的调价,在一个RewriteRule指令之前有一个或多个RewriteCond指令 RewriteCond  RewriteCond参数 &#39;-d&#39; 是一个目录[Directory] &#39;-f&#39; 是一个常规的文件[File]
通过rewrite实现404定义 RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule .? /404.php [L]  RewriteRule 参数  强制当前URL为被禁止的,即,立刻反馈一个HTTP响应代码403(被禁止的) &#39;forbiddenF&#39; (强制URL为被禁止的forbidden) 它使Pattern忽略大小写,即在Pattern与当前URl匹配时,&amp;lsquo;A-Z&amp;rsquo;和&amp;rsquo;a-z&amp;rsquo;没有区别 &#39;nocaseNC&#39; (忽略大小写 no case) 立即停止重写操作,并不再应用其他重写规则.这个标记可以阻止当前已被重写的URl被其后续的规则所重写 &#39;lastL&#39; (最后一个URL规则的重写 last)  伪静态操作 RewriteEngine On RewriteRule ^/?news_(\d+).html news.php?nid=$1 [NC,L]  防止图片盗链 如果不是从本网站请求图片,替换成logo.</description>
    </item>
    
    <item>
      <title>Apt-get 强制使用 IPv4</title>
      <link>https://example.com/posts/vim%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/vim%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</guid>
      <description>CentOS自带了Vi编辑器 Vim是Vi的高级版本,增加了诸如代码高了等功能 Vim需要单独安装 yum install -y vim
Vim的三种模式 命令模式  读取,查找,保存文件等操作
编辑模式 对内容进行编辑复制等操作
一般模式 移动光标,复制删除等操作
Vim的使用 打开文件 vim index.php
 输入内容 i
 返回标准模式 Esc
 保存退出 :wq
   Vim常用快捷键    按键 说明     i, I i当前光标插入,I行首插入   a, A a下一个字符插入,A行尾插入   o, O o下一行插入,O上一行插入   Esc Esc返回标准模式   &amp;mdash;&amp;ndash;    :w 保存   :w!</description>
    </item>
    
    <item>
      <title>Apt-get 强制使用 IPv4</title>
      <link>https://example.com/posts/apt-get-%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8-ipv4/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/apt-get-%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8-ipv4/</guid>
      <description>vps 上运行apt update使用了ipv6的地址, 导致连接速度非常慢.
使用apt -o Acquire::ForceIPv4=true参数可以强制使用ipv4地址. 添加到配置文件中
$ echo &#39;Acquire::ForceIPv4 &amp;quot;true&amp;quot;;&#39; | sudo tee /etc/apt/apt.conf.d/99force-ipv4  在 Ubuntu Saucy &amp;amp; Debian Jessie 之后的版本有效.</description>
    </item>
    
    <item>
      <title>Fedora23搭建PHP开发环境</title>
      <link>https://example.com/posts/fedora23%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/fedora23%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>添加163镜像源。 $ cd /etc/yum.repos.d $ wget http://mirrors.163.com/.help/fedora-163.repo $ wget http://mirrors.163.com/.help/fedora-updates-163.repo  配置dnf自动选择最快的镜像源 $ vim /etc/dnf.conf # 在文件末尾添加一行 fastestmirror=true # wq保存退出  生成缓存 $ dnf clean all $ dnf makecache  检查更新 &amp;amp;&amp;amp; 升级更新 $ dnf check-update $ dnf upgrade  添加RPM-Fusion源 $ su -c &#39;dnf install http://download1.rpmfusion.org/free/fedora/rpmfusion-$ free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm&#39; $ su -c &#39;dnf update&#39;  添加Remi源 wget http://rpms.remirepo.net/fedora/remi-release-23.rpm su -c &#39;dnf install remi-release-23.rpm&#39; dnf repolist all  安装Nginx Mainline version $ vi /etc/yum.</description>
    </item>
    
    <item>
      <title>Memcached 介绍</title>
      <link>https://example.com/posts/memcached%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/memcached%E4%BB%8B%E7%BB%8D/</guid>
      <description>##MemCache介绍 - Memcache是一个高性能的分布式的内存对象缓存系统.通过将数据调用到内存中,然后从内存中读取,从而大大提高读取速度 - 以守护进程方式运行于一个或者多个服务器中,随时会接收客户端的连接和操作 - 主要用于关系型数据库的缓存,也可以用于SESSION储存处理 - 将数据储存到内存中,比关系型数据要快得多,因为内存的访问速度快于硬盘数百倍 - 同时也因为是将数据存储到内存中,所以当服务器重启的时候数据会全部丢失
MemCache安装与启动  安装 # yum -y install memcached.i686 启动 memcached -m 128m -p 11211 -d -u root -P /tmp/memcached.pid -c 256 启动参数  -p tcp端口号 默认11211 -m 最大内存大小,默认64m -d 作为守护进程在后台运行 -c 最大并发连接数 -P 保存Memcache的pid文件 -l 监听服务器地址 -u 如果以root用户启动MemCache必须加此选项  通过netstat -anpl | grep 11211查看是否启动成功 kill -9 &#39;cat /tmp/memcached.pid&#39;  开启PHP中的MemCache支持  安装PHP的MemCache扩展 yum install -y php-pecl-memcache  在PHP中操作MemCache缓存 &amp;lt;?</description>
    </item>
    
    <item>
      <title>MysQL 权限系统</title>
      <link>https://example.com/posts/mysql%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/mysql%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>MySQL权限系统  当你连接MySql服务器时,你的身份有你从哪儿连接的主机和你指定的用户名来决定 服务器在mysql数据库的授权表中保存权限信息(即在mysql数据库中),当mysql服务器启动时讲这些表的内容读入内存 如果更改了权限,必须刷新授权表或重启mysql服务器才会生效  初始安全设置  mysql安全设置脚本 mysql_secure_installation 查看账号信息 select host,user,password from mysql.user 说明: 对user表进行操作,需要重启mysql服务器或执行flush privileges重新将授权表读入内存  ##设置密码 * 设置密码 update mysql.user set password=password(&#39;admin888&#39;) where user=&#39;root&#39; * 重启读取授权表 flush privileges
忘记ROOT密码  修改mysql配置文件vim /etc/my.cnf 在[mysqld]的段中加上skip-grant-tables service mysqld restart update mysql.user set password=password(&#39;admin888&#39;) where user=&#39;root&#39;; 删除my.cnf中skip-grant-tables这一行 service mysqld restart  添加账号与设置密码  添加账号拥有所有权限 grant all on *.* to &#39;testuser&#39;@&#39;localhost&#39; identified by &#39;admin888&#39;; all 所有权限 on *.* 所有库中的所有表 &#39;testuer&#39;@&#39;localhost&#39; 通过localhost登录的testuser用户 identified by 设置密码 添加用户后执行 flush privileges; #重新加载授权表  ##删除用户账户 * 删除匿名用户 delete from mysql.</description>
    </item>
    
    <item>
      <title>PHP深入面向对象模式与实践读书笔记（第3章 对象基础）</title>
      <link>https://example.com/posts/php%E6%B7%B1%E5%85%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E7%AC%AC3%E7%AB%A0-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/php%E6%B7%B1%E5%85%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E7%AC%AC3%E7%AB%A0-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</guid>
      <description>第3章 对象基础  类和对象：声明类及实例化对象 构造方法：自动加载对象 基本数据类型和类的类型：为什么类型很重要 继承（inheritance）：为什么需要继承以及如何是使用继承 可见性（visibility）：整合对象接口并保护类中的方法和属性不受干涉  3.1类和对象 3.1.1 类是用于生成对象的模板 class ShopProduct { //类体 }  3.1.2 第一个对象（或两个） 对象是根据类中定义的模板锁构造的数据，被称作类的“实例”，它是由类定义的数据类型。
$product1 = new ShopProduct(); $product2 = new ShopProduct();  $product1和$product2是有同一个类生成的相同类型的不同对象。每个对象具有唯一的身份（或标识符，identifier）。
var_dump($product1); var_dump($product2);  得到的输出如下：
object (ShopProduct) #1 (0) { } object (ShopProduct) #2 (0) { }  3.2 设置类中的属性 类可以定义被称为属性的特定变量。</description>
    </item>
    
    <item>
      <title>Samba 共享服务</title>
      <link>https://example.com/posts/samba%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/samba%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/</guid>
      <description>###Samba服务器可以让Windows操作系统（ Windows 2000/XP/2003等）用户访问局域网中Linux主机，就象访问网上邻居那样简便。
1. 安装samba服务 yum install -y samba
2. 启动samba服务 service smb start
3. 创建共享目录 mkdir /share
4. 修改配置文件 vim /etc/samba/smb.conf
# Un-comment the following and create the netlogon directory for Domain Logons [symo] #共享名称 comment = Network Logon Service #共享描述 path = /share` #共享文件夹路径 guest ok = yes #是否允许游客访问 writable = no #是否允许修改  修改后可以测试配置文件 testparm /etc/samba/smb.conf
5. 启动samba服务,此时共享文件夹就可以被访问到了 service smb start
需要验证的samba设置 1. 添加组用作共享权限设置 groupadd share</description>
    </item>
    
    <item>
      <title>Sublime Text3 下载与使用</title>
      <link>https://example.com/posts/sublime-text3-%E4%B8%8B%E8%BD%BD%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/sublime-text3-%E4%B8%8B%E8%BD%BD%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>一个很好用的文本编辑器,拥有跨平台的版本(Linux、MacOS、Windows)、强大的可扩展性（PackageControl）是图形界面（GUI）下极其优秀的文本编辑器，与命令行环境（CLI）下的VIM互相补充可以满足绝大多数的文本编辑需要。    下载地址: sublime text 3
 官方文档站: Sublime Text 3 Documentation
 非官方文档站(搜索功能很强大): Sublime Text Unofficial Documentation
 插件包管理网站: PackageControl
   安装时可以勾选 &amp;gt;add to explorer context mune
添加一个右键菜单选项以方便的打开各种需要使用sublime编辑的文件.
###一、插件: Sublime text 3 的一大优点就是插件资源极其丰富。
直接安装
安装Sublime text 3插件很方便，可以直接下载安装包解压缩到Packages目录（菜单-&amp;gt;preferences-&amp;gt;packages）。
使用PackageControl安装
也可以使用sublime的组件管理器直接搜索安装（推荐）。 &amp;gt;* 按Ctrl+`调出Console; * 粘贴以下代码到底部命令行并回车： * (sublime text2与sublime text3的安装方法并不一样,此处仅用于sublime text3)
import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.</description>
    </item>
    
    <item>
      <title>VMware中为Fedora 23安装VMware Tools</title>
      <link>https://example.com/posts/vmware%E4%B8%AD%E4%B8%BAfedora-23%E5%AE%89%E8%A3%85vmware-tools/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/vmware%E4%B8%AD%E4%B8%BAfedora-23%E5%AE%89%E8%A3%85vmware-tools/</guid>
      <description>VMware中为Fedora 23安装VMware Tools  添加163镜像源。
# cd /etc/yum.repos.d # wget http://mirrors.163.com/.help/fedora-163.repo # wget http://mirrors.163.com/.help/fedora-updates-163.repo  配置dnf自动选择最快的镜像源
# vim /etc/dnf.conf #在文件末尾添加一行 fastestmirror=true #wq保存退出  生成缓存
# dnf clean all # dnf makecache  检查更新 &amp;amp;&amp;amp; 升级更新
# dnf check-update # dnf upgrade  安装编译环境
# dnf install gcc glibc-headers kernel-devel kernel-headers make perl  安装Open-vm-tools
# dnf install open-vm-tools  挂载镜像
# mkdir /mnt/cdrom # mount /dev/cdrom /mnt/cdrom  解压 &amp;amp;&amp;amp; 安装</description>
    </item>
    
    <item>
      <title>VPS上的CentOS7 Minimal配置Nginx PHP7 MariaDB开发环境</title>
      <link>https://example.com/posts/vps%E4%B8%8A%E7%9A%84centos7-minimal%E9%85%8D%E7%BD%AEnginx-php7-mariadb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/vps%E4%B8%8A%E7%9A%84centos7-minimal%E9%85%8D%E7%BD%AEnginx-php7-mariadb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description> VPS上基于CentOS7 Minimal系统配置Nginx PHP7和MariaDB（LEMP）的开发环境 安装Nginx Stable Version，推荐的方法是使用Nginx官方维护的源。  创建一个yum源的文件# vi /etc/yum.repos.d/nginx.repo。 添加如下内容  [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/ gpgcheck=0 enabled=1  安装 # dnf install nginx 查看版本 # nginx -v  添加Remi源为安装PHP7做准备。  Remi源需要epel源中的一些依赖，所以首先添加Epel源。 # dnf install epel-release  </description>
    </item>
    
    <item>
      <title>XShell SSH到虚拟机提示信息变为中文的解决方案</title>
      <link>https://example.com/posts/xshell-ssh%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E5%8F%98%E4%B8%BA%E4%B8%AD%E6%96%87%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/xshell-ssh%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E5%8F%98%E4%B8%BA%E4%B8%AD%E6%96%87%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>XShell SSH到虚拟机提示信息变为中文的解决方案 在VMware中安装了Fedora 23，使用XShell连接到目标机器之后发现所有的提示都变成了中文。
[symo@bogon ~]$ vima -bash: vima: 未找到命令  甚至软件包的名字也以中文显示了。
[symo@bogon ~]$ dnf grouplist 上次元数据过期检查在 0:46:17 前执行于 Tue Feb 2 21:48:49 2016。 可用环境组： 最小化安装 Fedora Server Fedora Workstation Fedora Cloud Server KDE Plasma Workspaces Xfce Desktop LXDE 桌面环境 LXQt Desktop Cinnamon 桌面环境 MATE 桌面环境 Sugar 桌面环境 开发和创意工作站 Web 服务器 基础设施服务器 Basic Desktop 可用组： 管理工具 Audio Production 写作和出版 书籍和指南 C Development Tools and Libraries 云计算基础 Cloud Management Tools Container Management D Development Tools and Libraries 设计套件 开发工具 Domain Membership Fedora Eclipse 编辑器 教育软件 电子实验室 工程和科学 FreeIPA Server 游戏和娱乐 Headless Management LibreOffice MATE Applications MATE Compiz 医疗程序 Milkymist 网络服务器 办公/办公效率 机器人学 RPM Development Tools 安全实验室 声音和视频 系统工具 基于文本的互联网 3D Printing 窗口管理器  这样虽然看起来更加直观但是不利于出了问题之后的搜索，所以还是得改回英文。</description>
    </item>
    
    <item>
      <title>主从同步原理</title>
      <link>https://example.com/posts/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/</guid>
      <description>主从同步原理  主服务器验证连接 主服务器为从服务器开启一个线程 从服务器将主服务器日志的偏移位告诉主服务器 主服务器检查该值是否小于当前二进制日志偏移位 如果小于,则通知服务器来取数据 从服务器持续从主服务器取数据,直至取完,这时,从服务器线程进入睡眠,主服务器线程同时进入睡眠 当主服务器有更新时,主服务器线程被激活,并将二进制日志推送给从服务器,并通知从服务器进入工作状态 从服务器SQL线程执行二进制日志,随后进入睡眠状态  配置实验环境  下载mysql安装包 # wget http://mirrors.sohu.com/mysql/MySQL-5.5/MySQL-server-5.5.38-1.rhel5.i386.rpm # wget http://mirrors.sohu.com/mysql/MySQL-5.5/MySQL-client-5.5.38-1.rhel5.i386.rpm 执行安装 # rpm -ivh MySQL-server-5.5.36-1.rhel5.i386.rpm # rpm -ivh MySQL-client-5.5.36-1.rhel5.i386.rpm 错误处理 缺少Perl包 error: Failed dependencies:/usr/bin/perl is needed by MySQL-server-5.5.36-1.rhel5.i386 安装Perl即可 # yum install -y perl
与原先版本冲突 查看系统已经安装的版本 # rpm -qa | grep mysql 卸载 # rpm -e --nodeps mysql-libs-5.1.71-1.el6.i686 4.复制配置文件 # cp /usr/share/mysql/my-large.cnf /etc/my.cnf 启动服务 # service mysql start  设置主服务器 修改my.</description>
    </item>
    
    <item>
      <title>交互式的Debug工具PsySH</title>
      <link>https://example.com/posts/%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%9A%84debug%E5%B7%A5%E5%85%B7psysh/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%9A%84debug%E5%B7%A5%E5%85%B7psysh/</guid>
      <description>原文： Interactive PHP Debugging with PsySH 作者： Miguel Ibarra Romero 翻译：Symo
现在是凌晨一点，距离你的Web项目上线只有八个小时了，然而它却不能正常的工作。你不停向代码中填入var_dump()和die()试图定位程序中的bug……
此时的你异常恼火，不得不一遍又一遍的更改源码，运行程序，查看某个函数的返回值或者检查某个变量是否被正确的赋值。最后也不确定是否要删掉代码中一大堆的var_dump()。
这样的情景是否于你似曾相识呢？
PsySH来拯救你了 PsySH是一个交互式的解释环境(Read-Eval-Print Loop)，如果你曾经使用浏览器的控制台调试过JavaScript，你会明白这是一个非常强大和方便的Debug方式。
谈到PHP，你也许用过PHP的交互控制台(php -a)，在里面你可以直接写一些代码然后直接执行它们。
php -a Interactive shell php &amp;gt; $a = &#39;Hello world!&#39;; php &amp;gt; echo $a; Hello world! php &amp;gt;  然而遗憾的是，这个交互式界面缺乏一个“P”（print），所以不是REPL。我必须执行一个echo语句来打印$a的值。使用真正的REPL，我们将会在给变量赋值的一瞬间看到结果。
要安装PsySH，可以使用composer g require，也可以下载PsySH的可执行文件。
Composer composer g require psy/psysh:~0.1 psysh  直接下载（Linux、Mac） wget psysh.org/psysh chmod +x psysh ./psysh  另外，你也可以使用composer为每个项目单独的引入PsySH，就像一会儿你在将在文章的后面见到的。
现在，让我们开始使用一下PsySH吧。
./psysh Psy Shell v0.1.11 (PHP 5.5.8 — cli) by Justin Hileman &amp;gt;&amp;gt;&amp;gt;  它的主要帮助文件将会是你的好助手，它会告诉你所有的参数和它们的含义。</description>
    </item>
    
    <item>
      <title>微信接口创建按钮时的中文编码问题</title>
      <link>https://example.com/posts/%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%88%9B%E5%BB%BA%E6%8C%89%E9%92%AE%E6%97%B6%E7%9A%84%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 07 Mar 2017 23:45:05 +0800</pubDate>
      
      <guid>https://example.com/posts/%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%88%9B%E5%BB%BA%E6%8C%89%E9%92%AE%E6%97%B6%E7%9A%84%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>在对微信订阅号接口开发的过程中,发现对微信服务器推送创建按钮的Json总是出现失败, 打印了一下JSON的输出才发现被json_encode函数转换过的数组中,原先的中文字符全部被转成了URL编码. 所以在转JSON之前需要先对数组处理一下:
public function urlencodeArray($data){ $result = array(); foreach ($data as $k =&amp;gt; $v){ $result[urlencode($k)] = is_array($v) ? $this-&amp;gt;urlencodeArray($v) : urlencode($v); } return $result; }  处理过后的数组就可以使用json_encode编码之后返回了,问题解决. $json = urldecode(json_encode($this-&amp;gt;urlencodeArray($data)));</description>
    </item>
    
    <item>
      <title>CentOS 防火墙配置</title>
      <link>https://example.com/posts/centos%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 19 Jul 2015 20:12:11 +0800</pubDate>
      
      <guid>https://example.com/posts/centos%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/</guid>
      <description>##iptables规则 1. 规则从上向下匹配,如果匹配成功一条规则,则不向下进行匹配(重要) 2. 没有匹配的规则时,执行默认动作 3. 规则存储在内存中,不会自动存储到磁盘,因此重启之后规则就失效了,所以需要使用初始化脚本来保存规则 4. 如果远程管理服务器,比如使用SSH,那么配置规则之前首先添加允许SSH的规则,不然iptables会把你自己阻止在外
##iptable链与处理方式 ###iptable链 * INPUT链 进站数据包的规则 * OUTPUT链 出站数据包的规则 ###处理方式 * ACCEPT 数据包允许通过其到达目的地 * DROP 数据包被拒绝不返回任何信息
查看防火墙 iptables -L
Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination  清空防火墙 iptables -F ##实例: ###禁止192.168.1.100通过SSH的22端口了解服务器 iptables -A INPUT -s 192.168.1.100 -p TCP--dport 22 -j DROP |参数|(参数区分大小写)| |:&amp;ndash;:|:&amp;ndash;:| |-A|追加规则链到底部| |-I|插入规则链到头部| |-s|来源IP| |-d|目的地址(即服务器的IP)| |-D|删除规则| |-p|通信协议(TCP,UDP)| |&amp;ndash;dport|目的端口(SSH服务默认使用22)| |&amp;ndash;sprot|来源端口| |-j|操作方式(ACCEPT,DROP)| |-i|数据包进入的网卡| |-o|流出数据包的网卡| |-L|查看防火墙规则| |&amp;ndash;line-number|带行号显示| |-P|默认规则| |-n|以数字形式显示</description>
    </item>
    
    <item>
      <title>Apache服务器</title>
      <link>https://example.com/posts/apache%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sun, 07 Jun 2015 21:22:56 +0800</pubDate>
      
      <guid>https://example.com/posts/apache%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>安装LAMP环境 1. 安装Apache yum -y install httpd
2. 安装MySQL yum -y install mysql mysql-server
3. 安装PHP yum -y install php php-mysql php-mbstring php-gd
Apache服务启动与关闭 apachectl start apachectl stop apachectl restart
文件说明 主配置文件 /etc/httpd/conf/httpd.conf
扩展配置文件 /etc/httpd/conf.d/*.conf 当Apache启动时,会加载此目录下的所有以.conf结尾的文件,作为配置文件
主配置文件 Listen 80  监听端口 修改为8080,表示只能通过192.168.1.2:8080访问
User apache Apache子进程所有者
Group apache Apache子进程所属组
DocumentRoot &amp;ldquo;/var/www/html&amp;rdquo; 网站数据根目录
ServerName localhost 服务器的主机名
 通常这个值是自动指定的,推荐显式指定它以防止启动时出错
DirectoryIndex index.html index.html.var 网站默认主页,指定多个时,以此匹配(如果修改无效,可能被php.conf扩展配置覆盖)
  网站根目录权限设置 &amp;lt;Directory/&amp;gt; Options Indexes FollowSymLinks AllowOverride None &amp;lt;/Directory&amp;gt;  indexes  如果访问的文件不存在,显示目录文件列表</description>
    </item>
    
  </channel>
</rss>